// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not(in=zx , out=NotZX );
    Mux16(a=false , b=true , sel=NotZX , out=NotZX16 );
    Mux16(a=false , b=true , sel=nx , out=NX16 );

    Not(in= zy, out=NotZY );
    Mux16(a=false , b=true , sel=NotZY , out=NotZY16 );
    Mux16(a=false , b=true , sel=ny , out=NY16 );

    Mux16(a=false , b=true , sel=no , out=NO16 );

    And16(a=NotZX16 , b=x , out=X1 );
    Xor16(a = NX16, b = X1, out = X2);
    And16(a=NotZY16 , b=y , out=Y1 );
    Xor16(a = NY16, b = Y1, out = Y2);

    Add16(a = X2, b = Y2, out =XPlusY );
    And16(a=X2 , b=Y2 , out=XAndY );
    Mux16(a=XAndY , b=XPlusY , sel=f , out=Out1 );
    Xor16(a = NO16, b = Out1, out = out , out[0..7] = FinalOut0to7, out[8..14] = FinalOut8to14, out[15] = FinalOut15);

    Or8Way(in=FinalOut0to7 , out=OutNZ1 );
    Or8Way(in[0..6]=FinalOut8to14, in[7] = FinalOut15 , out=OutNZ2 );
    Or(a=OutNZ1 , b=OutNZ2 , out=OutNZ );
    Not(in=OutNZ , out=zr );
    And(a=FinalOut15 , b=true , out=ng );
}
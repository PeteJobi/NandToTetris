// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Mux16(a=A , b=inM , sel=instruction[12] , out=ALUY );
    ALU(x=D , y=ALUY , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=ALUOut , zr=ZR , ng=NG );
    
    And(a=instruction[15] , b=instruction[3] , out=writeM , out=setWriteM );
    Mux16(a=inM , b=ALUOut , sel=setWriteM , out=outM );

    And(a=instruction[15] , b=instruction[4] , out=setD );
    DRegister(in=ALUOut , load=setD , out=D );

	Mux16(a=instruction , b=ALUOut , sel=instruction[15] , out=AOut );
    Not(in=instruction[15] , out=IsAInstr );
    Or(a=IsAInstr , b=instruction[5] , out=setA );
    ARegister(in=AOut , load=setA , out=A, out[0..14]=addressM );

    Or(a=ZR , b=NG , out=ZRorNG );
    Not(in=ZRorNG , out=GR );
    Not(in=NG , out=NotNG );
    Not(in=ZR , out=NotZR );
    Not(in=GR , out=NotGR );
    Mux8Way16(a=false , b[0]=GR , c[0]=ZR , d[0]=NotNG , e[0]=NG , f[0]=NotZR , g[0]=NotGR , h=true , sel=instruction[0..2] , out[0]=PCLoadOut );
    And(a=PCLoadOut , b=instruction[15] , out=PCLoad );
    PC(in=A , load=PCLoad , inc=true , reset=reset , out[0..14]=pc );
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int length;
    //field int ascii0;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength > 0){
            let string = Array.new(maxLength);
        }else{
            do string.dispose();
            let string = null;
        }
        let length = 0;
        //let ascii0 = 48; //48 is ascii value of '0'
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(string = null)){
            do string.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let string[length] = null;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int res, i, p, num;
        let i = length - 1;
        let p = 1;

        while(~(i < 0)){
            let num = string[i] - 48;
            if((num < 0) | (num > 9)){
                if(num = -3){ let res = -res; } //hyphen (negative sign)
                return res;
            }
            let res = res + (num * p);
            let p = p * 10;
            let i = i - 1;
        }

        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        while(length > 0){ do eraseLastChar(); }
        if(val < 0){
            do appendChar(45); //hyphen (negative sign)
            let val = Math.abs(val);
        }
        do setIntInner(val);
        return;
    }

    method void setIntInner(int val) {
        var int r, d;
        let d = val / 10;
        let r = val - (d * 10);
        if(d > 0) { do setIntInner(d); }
        do appendChar(r + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

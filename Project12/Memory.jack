// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int heapStart, heapEnd;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heapStart = 2048;
        let memory[heapStart + 1] = 16384 - heapStart - 2;
        let heapEnd = heapStart;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int free, freeSize, chosen;
        let free = heapStart;
        while(~(free = null)){
            let freeSize = memory[free + 1];
            if(freeSize > (size + 1)){
                let memory[free + 1] = freeSize - size - 2;
                let chosen = free + 2 + freeSize - size;
                let memory[chosen - 1] = size;
                let memory[chosen - 2] = null;
                return chosen;
            }
            let free = memory[free];
        }
        //TODO: If no "chosen" is found, De-frag the free segments.
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let memory[heapEnd] = o - 2;
        let heapEnd = o - 2;
        return;
    }    
}
